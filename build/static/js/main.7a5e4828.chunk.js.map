{"version":3,"sources":["images/translation/translation_demo.mp4","images/RESUME.pdf","images/artsy_profile.png","images/dataverse/thumbnail_dv.png","images/netflix/netflix_thumbnail.png","images/poster/poster_thumbnail.png","images/jam-stage/jam_thumbnail.png","images/dash/dash_thumbnail.png","images/translation/translation_thumbnail.png","images/dataverse/dv_home_page.png","images/jam-stage/zoomed-out.png","images/jam-stage/close-up.png","images/poster/orange_poster.png","images/netflix/netflix_actor_flow_with_tooltip.png","images/netflix/netflix_runtime_graph.png","images/dash/ideation.png","images/dash/interaction_table.png","images/dash/touch_menu_cropped.mp4","images/translation/translation_diagram.png","images/poster/poster_demo.mp4","images/train/train_thumbnail.jpg","images/train/train_phone1.png","images/train/train_phone2.png","images/train/train_physical.jpg","images/train/train_physical_demo.mp4","images/train/train_app_walkthrough_cropped.mp4","VerticalNavBar.js","sections/WhoIAmPage.jsx","sections/Section.jsx","components/DisplayGrid.jsx","components/PopupButton.jsx","sections/CodeProjects.jsx","sections/DesignProjects.jsx","sections/Resume.jsx","sections/ArtProjects.jsx","PortfolioSite.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","VerticalNavBar","props","state","currPage","pages","pg","this","setState","selectPage","count","className","id","src","profilePic","map","key","name","Component","WhoIAmPage","interval","DisplayGrid","open","items","PopupButton","expanded","onClick","close","expand","thumbnail","title","subtitle","keywords","word","launchLink","href","target","launchBtnText","OpenInNew","style","pageHTML","CodeProjects","projects","getProjects","logline","dv_thumbnail","languages","getDataversePage","jam_thumbnail","getJamStagePage","poster_thumbnail","getPosterGenPage","netflix_thumbnail","getNetflixPage","dash_thumbnail","getDashPage","demoLink","translation_thumbnail","getTranslationPage","translation_demo","dataverse_home","jam_zoomout","jam_zoomin","autoPlay","muted","loop","poster_demo","type","orange_poster","netflix_runtime","netflix_flow","dash_ideation","dash_interaction_table","dash_touch_demo","translation_diagram","project_count","p","DesignProjects","getTriviaTrainPage","train_phone1","train_phone2","train_physical","train_physical_demo","train_app_demo","train_thumbnail","tools","Resume","resume","width","height","ArtProjects","PortfolioSite","updateSelectedPage","page","curPage","content","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a5e4828.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/translation_demo.c2253d28.mp4\";","module.exports = __webpack_public_path__ + \"static/media/RESUME.59f85adf.pdf\";","module.exports = __webpack_public_path__ + \"static/media/artsy_profile.c9bf2293.png\";","module.exports = __webpack_public_path__ + \"static/media/thumbnail_dv.ff7bf2c0.png\";","module.exports = __webpack_public_path__ + \"static/media/netflix_thumbnail.b731ff8b.png\";","module.exports = __webpack_public_path__ + \"static/media/poster_thumbnail.760a58b8.png\";","module.exports = __webpack_public_path__ + \"static/media/jam_thumbnail.8cebe69a.png\";","module.exports = __webpack_public_path__ + \"static/media/dash_thumbnail.f4b9d0da.png\";","module.exports = __webpack_public_path__ + \"static/media/translation_thumbnail.2bd1b7fe.png\";","module.exports = __webpack_public_path__ + \"static/media/dv_home_page.ac78cdc2.png\";","module.exports = __webpack_public_path__ + \"static/media/zoomed-out.779a1206.png\";","module.exports = __webpack_public_path__ + \"static/media/close-up.479e4f07.png\";","module.exports = __webpack_public_path__ + \"static/media/orange_poster.8f4acfb1.png\";","module.exports = __webpack_public_path__ + \"static/media/netflix_actor_flow_with_tooltip.f4a5c2e9.png\";","module.exports = __webpack_public_path__ + \"static/media/netflix_runtime_graph.546af466.png\";","module.exports = __webpack_public_path__ + \"static/media/ideation.c61b2158.png\";","module.exports = __webpack_public_path__ + \"static/media/interaction_table.12c700a8.png\";","module.exports = __webpack_public_path__ + \"static/media/touch_menu_cropped.70e3debe.mp4\";","module.exports = __webpack_public_path__ + \"static/media/translation_diagram.4a746c1a.png\";","module.exports = __webpack_public_path__ + \"static/media/poster_demo.ab2c00ad.mp4\";","module.exports = __webpack_public_path__ + \"static/media/train_thumbnail.199250ef.jpg\";","module.exports = __webpack_public_path__ + \"static/media/train_phone1.d2f7923b.png\";","module.exports = __webpack_public_path__ + \"static/media/train_phone2.02d75139.png\";","module.exports = __webpack_public_path__ + \"static/media/train_physical.d8d47bbf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/train_physical_demo.48cd9604.mp4\";","module.exports = __webpack_public_path__ + \"static/media/train_app_walkthrough_cropped.d6395f19.mp4\";","import React, { Component } from 'react';\nimport './VerticalNavBar.css';\nimport profilePic from \"./images/artsy_profile.png\";\n\nclass VerticalNavBar extends Component {\n\n    constructor(props) {\n        super(props);\n    \n        this.state = {\n          currPage: this.props.pages[0] //default is first\n        };\n    }\n\n    selectPage(pg) {\n        this.setState({currPage: pg})\n        this.props.selectPage(pg)\n    }\n\n    render(){    \n        let count = 0;\n        return (\n            <div className=\"navbar\">\n                <div id=\"header-content\">\n                <img id=\"profile-img\" src={profilePic}></img>\n                <h2 id=\"title\"><b>Laura Wilson</b></h2>\n                <small className=\"subtitle\">CS | Brown '21</small>\n                </div>\n\n                <div id=\"pages\">\n                {/*display all the names of the pages as buttons that will scroll to the content*/}\n                {this.props.pages.map(pg => \n                    <h4 key={\"btn-\" + count++} className=\"page-name\" className={(this.state.currPage == pg ? \"selected\" : \"\")}\n                        onClick={() => this.selectPage(pg)}>\n                             {(this.state.currPage == pg ? \">_\" : \"\")}{pg.name}\n                        </h4>)}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default VerticalNavBar;\n","import React, { Component } from 'react';\nimport './Section.css';\nimport TextLoop from \"react-text-loop\";\n\nclass WhoIAmPage extends Component {\n\n    // props are :headerText :list of body\n    constructor(props) {\n        super(props);\n      }\n\n    render(){    \n        return (\n            <div id=\"who-i-am-div\">\n                <h1 className=\"large-title\">Hi there, I'm Laura.</h1>\n                <h4 className=\"large-subtitle\">thanks for checking out my portfolio today!</h4>\n                <br/><br/><br/>\n                {/* subtitle that alternates text */}\n                <h2 id=\"dynamic-text\">I'm a{\" \"}\n                    <TextLoop interval={2000} className=\"changeable\">\n                        <span> senior at Brown University.</span>\n                        <span> Computer Science major.</span>\n                        <span> designer and visual artist.</span>\n                    </TextLoop>\n            </h2>\n\n            <p>I'm a <b>senior at Brown University</b>, graduating in Spring 2021.  As a computer science major, \n                I'm passionate about frontend web development and UI/UX, where I can merge my <b>interests \n                in software engineering and design.</b> I've been a TA for three CS courses and am currently a Head-TA for the UI/UX course. \n                In addition, I'm a mentor for new CS students and co-coordinator of the CS yearbook! </p>\n\n                <p>When I'm not debugging CSS or painting my cats, I'm usually baking, hiking, playing co-op board games, \n                    solving logic puzzles, or scouting out the best donut shop! </p>\n\n            </div>\n        );\n    }\n}\n\nexport default WhoIAmPage;","import React, { Component } from 'react';\nimport './Section.css';\n\nclass Section extends Component {\n\n    // props are :headerText :list of body\n    constructor(props) {\n        super(props);\n      }\n\n    render(){    \n        return (\n            <div id={this.props.id}>\n                <h1>{this.props.headerText}</h1>\n                {this.props.textBlocks?.map(txt => <p>txt</p>)}\n            </div>\n        );\n    }\n}\n\nexport default Section;","import React, { Component } from 'react';\nimport './DisplayGrid.css';\n\nclass DisplayGrid extends Component {\n\n    /**\n     * Grid that displays a list of things in a flex\n     * @param {items: [Component, ...]} props \n     */\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false\n        };\n      }\n\n    render(){    \n        return (\n            <div className=\"display-grid\">\n               {this.props.items}\n            </div>\n        );\n    }\n}\n\nexport default DisplayGrid;","import React, { Component } from 'react';\nimport './PopupButton.css';\nimport { OpenInNew } from '@material-ui/icons';\n\nclass PopupButton extends Component {\n\n    /**\n     * Large square button that opens a popup on click\n     * @param {title, subtitle, thumbnail, keywords: [string, ...], pageHTML} props \n     */\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            expanded: false\n        };\n      }\n\n    expand() {\n       this.setState({\n           expanded: true\n       })\n    }\n\n    close() {\n        this.setState({\n            expanded: false\n        })\n     }\n\n    render(){    \n        return (\n            <div className=\"popup-btn\">\n\n                <div className=\"popup-header\" onClick={() => this.state.expanded ? this.close() : this.expand()}>\n                    <img className=\"popup-thumbnail\" src={this.props.thumbnail}></img>\n                    <div className=\"popup-btn-text\">\n                        <h2 className=\"popup-title\">{this.props.title}</h2>\n                        <p className=\"popup-subtitle\">{this.props.subtitle}</p>\n                        <div className=\"popup-control-panel\">\n                            {this.props.keywords?.map((word) =>  <small>{word}</small>)}\n                            {this.props.launchLink && <a className=\"clickable\" href={this.props.launchLink} target=\"_blank\"><small>{this.props.launchBtnText ? this.props.launchBtnText : \"LAUNCH\"}<OpenInNew style={{ \"margin-bottom\": \"-3px\" , \"fontSize\": \"1rem\"}}/></small></a>}\n                        </div>\n                    </div>\n                </div>\n               \n                {this.state.expanded ? this.props.pageHTML : \"\"}\n               \n            </div>\n        );\n    }\n}\n\nexport default PopupButton;","import React, { Component } from 'react';\nimport './Section.css';\nimport DisplayGrid from '../components/DisplayGrid';\nimport PopupButton from '../components/PopupButton';\nimport dv_thumbnail from '../images/dataverse/thumbnail_dv.png'; \nimport netflix_thumbnail from '../images/netflix/netflix_thumbnail.png'; \nimport poster_thumbnail from '../images/poster/poster_thumbnail.png'; \nimport jam_thumbnail from '../images/jam-stage/jam_thumbnail.png';\nimport dash_thumbnail from '../images/dash/dash_thumbnail.png';\nimport translation_thumbnail from '../images/translation/translation_thumbnail.png';\n\n//page image imports\nimport dataverse_home from '../images/dataverse/dv_home_page.png';\nimport jam_zoomout from '../images/jam-stage/zoomed-out.png';\nimport jam_zoomin from '../images/jam-stage/close-up.png';\nimport orange_poster from '../images/poster/orange_poster.png';\nimport netflix_flow from '../images/netflix/netflix_actor_flow_with_tooltip.png';\nimport netflix_runtime from '../images/netflix/netflix_runtime_graph.png';\nimport dash_ideation from '../images/dash/ideation.png';\nimport dash_interaction_table from '../images/dash/interaction_table.png';\nimport dash_touch_demo from '../images/dash/touch_menu_cropped.mp4';\nimport translation_demo from '../images/translation/translation_demo.mp4';\nimport translation_diagram from '../images/translation/translation_diagram.png';\nimport poster_demo from '../images/poster/poster_demo.mp4'\n\n\nclass CodeProjects extends Component {\n\n\n    // props are :headerText :list of body\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            projects: this.getProjects()\n        };\n\n\n      }\n\n    // all the code projects\n    getProjects() {\n        return [\n            {title: \"Dataverse\", logline: \"An online universe to teach kids about data structures\", thumbnail: dv_thumbnail, languages: [\"React, JS, Java, SQL\"], launchLink: \"https://dataverse.fun\", pageHTML: this.getDataversePage()},\n            {title: \"Jam Stage\", logline: \"An audio-reactive environment made with Three.js\", thumbnail: jam_thumbnail, languages: [\"Three.js, WebAudio, JS\"], launchLink: \"https://laurawilsonri.github.io/jam-stage/\", pageHTML: this.getJamStagePage()},\n            {title: \"COVID-19 Poster Generator\", logline: \"Customize your own social distancing poster\", thumbnail: poster_thumbnail, languages: [\"HTML, CSS, JS\"], launchLink: \"https://laurawilsonri.github.io/covid-poster-generator/\", pageHTML: this.getPosterGenPage()},\n            {title: \"Visualize Netflix in D3\", logline: \"A dashboard of Netflix data visualizations created with D3.js\", thumbnail: netflix_thumbnail, languages: [\"D3, JS, HTML\"], launchLink: \"https://laurawilsonri.github.io/netflix-visualizer/\", pageHTML: this.getNetflixPage()},\n            {title: \"Dash\", logline: \"A collaborative online platform for media management\", languages: [\"React, TypeScript, C#\"], thumbnail: dash_thumbnail, pageHTML: this.getDashPage(), demoLink: \"https://cs.brown.edu/research/ptc/#/project/dash\"},\n            {title: \"Translation API\", logline: \"An automated translation workflow to multilingual sites\", languages: [\"Python, Django, Wagtail\"], thumbnail: translation_thumbnail, pageHTML: this.getTranslationPage(), demoLink: translation_demo}\n        ]}\n\n    getDataversePage() {\n       return <div className=\"project-expansion\">\n           <h3>Overview</h3>\n           <p>This website aims to <b>teach middle school students about data structures</b> in a new, fun way!  \n               Students fly around a rocket through dataverse, a universe where each planet offers a game that \n               is based on a specific data structure. Once they master single-player planets, they can <b>compete against \n               their friends in the multiplayer arena</b> or buy rocket skins and speed upgrades at the shop.</p>\n            \n            <img src={dataverse_home}></img>\n            <label>The welcome screen for dataverse informs users of the basic goal of the website and how to interact with the interface in a concise popup.</label>\n           \n            <h3>My Role</h3>\n            <p>This website was the final project for my Software Engineering class, completed with 3 other students over the course of 4 weeks.</p>\n            <p>The areas of the project I worked on included:\n            <ul>\n                <li>The frontend for the individual games <em>(Reactjs)</em></li>\n                <li>The graphics, art, and iconography <em>(Adobe Illustrator)</em></li>\n                <li>The backend integration and support for multiplayer <em>(Java)</em></li>\n            </ul>\n            </p>\n            \n            <h3>Takeaways</h3>\n            <p>\n                <b>Make your program extensible (yes, even the frontend!).</b><br/>\n                  Our site consists of many planets, including 6 minigames. This resulted in a LOT of pages and popups that were quite similar.\n                  Using React, we were able to create Components that could be reused to prevent repetetive code. Our games also followed a similar pattern\n                  of \"do x to earn y points in z seconds\", so we were able to abstract much of the game logic (backend and frontend). This made adding new games\n                  extremely fast and easy (in fact, we added an entirely new minigame planet the day before our presentation)!</p>\n            <p>\n                <b>Websockets can be a nightmare.</b><br/>\n                    We used websockets to send and receive messages between the frontend and the backend. \n                    This resulted in a long, messy list of message types, so to organize the madness, we created a \n                    MessageManager. To create a new message, we would register it through\n                    the MessageManager, along with a handler for that message. \n                    Then, the MessageManager would receive messages and direct them to the proper handlers.\n                    This made websockets really manageable and extensible for our project!</p>\n            <p>\n                <b>User testing is critical</b><br/>\n                To make sure our site was both informative and fun, we tested it on almost 100 8th graders from Lincoln Middle School. \n                The feedback we received was incredibly insightful-- \n                we learned that the students thought the games were really fun, and especially enjoyed competing against eachother in the multiplayer\n                area, but they felt like they didn't learn a lot about data structures. In response, we added a \"Learn More\" page for each game that \n                teaches about each data structure in more depth, and made the games a bit harder so that you would need to understand the data structure to\n                perform well. In addition, we were able to improve the usability of the site based on specific feedback from the students!\n            </p>\n            </div>;\n            }\n\n\n    getJamStagePage() {\n        return <div className=\"project-expansion\">\n            <h3>Overview</h3>\n                 <p>My final project for MUSC1001: Generative Animation, Jam Stage is <b>an audio-reactive virtual environment that matches the mood of a given audio piece</b>.  \n                     It was built for the web using Three.js and WebAudio. </p>\n            \n                <h3>How I Built It</h3>\n                    <p> I used <b>Three.js</b> to generate a dynamic particle system and <b>Web Audio</b> to get the data from the user’s audio file. \n                    With the data received from Web Audio, I grouped the amplitudes of the frequencies into averages, increasing the group size \n                    as the frequency increased to account for the overrepresentation of higher frequencies. Then, I mapped this data onto the \n                    movement of the particles. Each column of particles represents one frequency group (lower on the left, higher on the right), \n                    and its height represents that frequency group's amplitude. The number of particles that move within that column is \n                    determined by the total frequency sum (so if the sum is 50% of max, 50% of the particles of each column are randomly \n                    chosen to move). </p>\n\n                <img src={jam_zoomout}></img>\n                <label>The particle system first appears as a familiar audio-visualizer, but soon factors in sinusodial movement and the z direction to \n                    become an energetic galaxy, seen below.\n                </label>\n                <img src={jam_zoomin}></img>\n\n                <p>I also added sinusoidal movement for the x and z positions of the particles so that the system is also engaged in some \n                    sort of movement. The maximum z position is determined by the total amplitude of all the frequencies. </p>\n\n                <p>Some other techniques include:</p>\n                <ul>\n                    <li> The colors of each particle are randomized, but weighted towards purple for consistency, and are also affected by the amplitude of their corresponding frequencies.</li>\n                    <li> The size of each particle is representative of the loudness of the audio.</li>\n                    <li> The camera moves with the particles, using the mean location of all the particles to offset all the particles’ y values.</li>\n                </ul>\n                \n                <h3>Spotlight Challenge</h3>\n                <p>One of my biggest challenges in this project was creating readable visual changes that matched the audio’s rhythm. \n                    When I first started mapping all the dots to the amplitude values, the result was either A) too hectic and unreadable, \n                    or B) too simple and boring.  I ended up choosing to isolate the movement of the particles to a subset of each column \n                    so that, instead of all the particles moving each frame, a small amount is randomly chosen to move based on the overall \n                    loudness of the audio. This way, <b>the movement is isolated to a smaller number of particles, which results in visual \n                    changes that are more readable and meaningful.</b></p>\n                </div>;\n                }\n\n    getPosterGenPage() {\n        return <div className=\"project-expansion\">\n            <h3>Overview</h3>\n                <p>This Poster Generator lets users customize and download their own social distancing poster, helping people visualize and respect 6ft of distance through humor! </p>\n                <p>Below is a demo of some poster combinations you can create, or try it out yourself <a href=\"https://laurawilsonri.github.io/covid-poster-generator/\" target=\"_blank\">on the site</a>.</p>\n\n                <video className=\"autoplay-video\" autoPlay muted loop style={{\"width\": \"100%\"}}>\n                    <source src={poster_demo} type=\"video/mp4\" />\n                    Your browser does not support the video tag.\n                </video>\n\n                <img src={orange_poster}></img>\n                <label>An example of one of the posters you can create!</label>\n\n            <h3>How I Built It</h3>\n                <p>I used HTML, CSS, and JavaScript to make the poster generator, and the jsPDF library to download the HTML as a pdf.</p>\n            </div>\n        }\n\n    getNetflixPage() {\n        return <div className=\"project-expansion\">\n            <h3>Overview</h3>\n                <p>This dashboard uses D3.js to visualize the data provided in <a href=\"https://www.kaggle.com/shivamb/netflix-shows\">this Netflix \n                data set</a>. The visualizations reveal the number of titles on Netflix per genre and the average runtime of movies per release year.  \n                In addition, the interactive network graph allows you to explore the connections (shared films) between actors for all films on \n                Netflix directed by a particular director.</p>\n            \n                <img src={netflix_runtime}></img>\n                <label>I added tooltips to provide details about the data points without crowding the visualization with too much text.</label>\n\n                <img src={netflix_flow}></img>\n                <label>Hovering over a link reveals the connections (shared films) between two actors.</label>\n\n            <h3>How I Built It</h3>\n                <p>The data was cleaned and analyzed using panda and JavaScript, and visualized using D3.js.</p>\n            </div>\n        }\n\n        /** TODO: FINISH THIS AND ADD TRANSLATION API PAGE */\n    getDashPage() {\n        return <div className=\"project-expansion\">\n            <h3>Overview</h3>\n                <p>Nicknamed \"the IDE for the humanities\", Dash provides users with an <b>infinite workspace to manage their media</b>, \n                    show relationships between documents, and interact with information through both pen and touch. \n                    This is the longterm focal project of the Brown University Graphics Research Group, where I was an undergraduate\n                    reasearch assistant during my freshman and sophomore years! </p>\n            \n            <h3>Spotlight Contribution: Pen and Touch </h3>\n            <p>My largest task for the group was adding pen and touch support, with a focus on incorporating bimanual interactions.  \n                I began by researching touch interactions for both small and large displays. I was especially inspired by <a href=\"https://www.youtube.com/watch?v=dK-kX_p_IVM\">this video</a> from Microsoft Research. \n                I created a whiteboard to brainstorm some ideas, shown below.</p>\n\n            <img src={dash_ideation}></img>\n            <label>ideation for complex pen and touch interactions</label>\n\n            <p>\n            Then, with a fellow group member, I created the following plan for both basic and complex interactions, with the \n            bimanual interactions colored in blue.\n            </p>\n\n            <img src={dash_interaction_table}></img>\n            <label>the plan we created for the system of touch interaction</label>\n\n            <h3>Touch Context Menu: Bridging the Gap Between the Keyboard and Touch</h3>\n\n            <p>In order to compensate for the lack of keyboard shortcuts on touch screens, we created the touch context menu.  \n                When you <b>hold down a document and tap the background</b>, this menu <b>appears at your fingertips</b>, offering a variety \n                of operations relevant to the selected document, such as copy, pin to presentation, and delete.</p>\n\n            <video className=\"autoplay-video\" autoPlay muted loop>\n                <source src={dash_touch_demo} type=\"video/mp4\" />\n                Your browser does not support the video tag.\n            </video>\n            <label>The touch context menu in action, a palette of options that appear at your fingertips when you hold\n                a document and tap the background\n            </label>\n\n            <p>\n                The addition of this menu greatly <b>improved the efficiency of many of the core actions</b> of the site.  In addition,\n                it allowed users to perform many <b>complex actions on touch screens</b> that were previously only supported on desktop (due to \n                reliance on keyboards).\n            </p>\n\n            <p>\n                Though bimanual interactions were a focus of this project, I do acknowledge that this type of interaction \n                is not suitable for every user. For that reason, we ensured that every action was also possible to acheive \n                through a single-handed interaction, resulting in two (or more) interactions that lead to the same result,\n                in order to accomodate as many users as possible.\n            </p>\n\n            <h3>Takeaways from my time at the lab</h3>\n            <ul>\n                <li>How to work with a large and unfamiliar codebase</li>\n                <li>A plethora of new languages including C#, XAML, and Reactjs.</li>\n                <li>Experience working with a team on a long-term software engineering project </li>\n                <li>How to compose and present a demo to sponsors, such as Adobe</li>\n            </ul>\n\n            <h3>Want to learn more?  Interested in the Brown Graphics Group?</h3>\n                <p>Check out the group's research projects on our website <a href=\"http://ptc.cs.brown.edu/#/projects\">here</a>.</p>\n            </div>\n        }\n\n    getTranslationPage() {\n        return <div className=\"project-expansion\">\n            <h3>Overview</h3>\n                <p>\n                    Governments everywhere use the web to communicate critical information to residents. \n                    Due to a number of constraints, most content is published in English and residents who \n                    need support in other languages are pointed to less accurate fallbacks like Google Translate. \n                </p>\n\n                <p>\n                    For this project, my team partnered with the Brown Policy Lab to build <b>an automated translation \n                    system</b>that integrates a <b>3rd party translation service</b> into a <b>Content Management System.</b>\n                </p>\n            \n\n            <h3>A Deeper Look</h3>\n            <p>The workflow we created can be explained by the following diagram:</p>\n\n            <img src={translation_diagram}></img>\n            <ol>\n                <li>Website content editor <b>updates English content</b> of page through CMS and hits publish.</li>\n                <li>The changed fields are identified.</li>\n                <li>Make an <b>API call to Gengo</b> (3rd party translation service) for each target language.</li>\n                <li>A translator receives the request via Gengo’s interface and provides the translation.</li>\n                <li>BackgroundScheduler makes GET requests periodically to check for posted translations.</li>\n                <li>We parse the returned translation and <b>update the database.</b></li>\n                <li>The website is <b>republished with the up-to-date translations.</b></li>\n            </ol>\n\n            <video className=\"autoplay-video\" autoPlay muted loop>\n                <source src={translation_demo} type=\"video/mp4\" />\n                Your browser does not support the video tag.\n            </video>\n            <label>Mark walks through the automated translation workflow.</label>\n\n            <h3>My Role</h3>\n                <p>For this project, I was responsible for</p>\n                <ul>\n                    <li>building the test site using Django and Wagtail</li>\n                    <li>designing and implemented a diff-tool that detects when text fields are edited, and updates the proper fields in the database with the translations</li>\n                    <li>creating a dropdown that modifies the url and translates the page into the user's desired language</li>\n                </ul>    \n        </div>\n    }\n\n    render(){\n        let project_count = 0;\n\n        return (\n            <div id=\"code-projects\">\n                <h2>What I've been Coding Up</h2>\n\n                <DisplayGrid items={this.state.projects.map((p) => <PopupButton key={\"project-count-\" + project_count++} \n                    title={p.title} \n                    subtitle={p.logline} \n                    thumbnail={p.thumbnail} \n                    keywords={p.languages}\n                    launchLink={p.launchLink ? p.launchLink : p.demoLink}\n                    launchBtnText={p.demoLink && \"DEMO\"}\n                    pageHTML={p.pageHTML}/>)} />\n           \n            </div>\n        );\n    }\n}\n\nexport default CodeProjects;","\n\nimport React, { Component } from 'react';\nimport './Section.css';\nimport DisplayGrid from '../components/DisplayGrid';\nimport PopupButton from '../components/PopupButton';\nimport train_thumbnail from '../images/train/train_thumbnail.jpg'; \n//page image imports\nimport train_phone1 from '../images/train/train_phone1.png'; \nimport train_phone2 from '../images/train/train_phone2.png'; \nimport train_physical from '../images/train/train_physical.jpg'; \nimport train_physical_demo from '../images/train/train_physical_demo.mp4'; \nimport train_app_demo from '../images/train/train_app_walkthrough_cropped.mp4'; \n\n//constants\nconst trivia_link = \"https://docs.google.com/presentation/d/1BXPQT238tvSfXA1S_RnOdpTMQEdKXavHeTo8QA3m66Y/edit?usp=sharing\"\n\nclass DesignProjects extends Component {\n\n\n    // props are :headerText :list of body\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            projects: this.getProjects()\n        };\n      }\n\n    // all the code projects\n    getProjects() {\n        return [\n            {title: \"Trivia Train\", logline: \"Gamifing the Boston metro to build community between passengers\", thumbnail: train_thumbnail, tools: [\"Figma\", \"1st Place, RISD Makeathon\"], launchLink: trivia_link, pageHTML: this.getTriviaTrainPage()},\n        ]}\n\n    getTriviaTrainPage = () =>\n        <div className=\"project-expansion\">\n            <h3>The Problem</h3>\n            <p>Everyday, millions of people across America ride the subway. They sit tightly next to people they don't know, \n                zone out to their go-to playlist, and silently pass by the lively streets of their city. Their daily commutes\n                have become isolating and unfruitful. How can we use this time as an opportunity to <b>connect people to eachother and \n                their cities</b>?</p>\n           \n            <h3>The Solution</h3>\n            <p>As part of the 2020 RISD Makeathon (an 8-hour long design challenge competition), we designed Trivia Train, a <b>game \n                integrated into the Boston metro system where commuters are collectively involved in a trivia style game.</b>  \n                 Through either their phone or the button board on the train, commuters can answer questions about the local \n                community to earn points for their team (train line) while on their daily commute.\n                </p>\n            <p>Through this system, we hope to <b>connect passengers to local spaces and to create a community within the public \n                transit system</b></p>\n\n            <img src={train_phone1}></img>\n            <label>\n                Commuters answer LIVE questions from their phones about local history and current events. Users can even see \n                the percentage of commuters on their train guessed correctly. \n            </label>\n\n            <img src={train_phone2}></img>\n            <label>\n                Correct answers earn points for your team (your train line), and train lines compete to top the monthly leaderboard.\n            </label>\n\n            <img src={train_physical}></img>\n            <label>Riders without phones can still play along through the physical interface integrated onto the train</label>\n\n            <video className=\"autoplay-video\" autoPlay muted loop>\n                <source src={train_physical_demo} type=\"video/mp4\" />\n                Your browser does not support the video tag.\n            </video>\n            <label>The physical prototype we built to simulate the on-train interaction</label>\n\n            <video className=\"autoplay-video\" autoPlay muted loop>\n                <source src={train_app_demo} type=\"video/mp4\" />\n                Your browser does not support the video tag.\n            </video>            \n\n            <h3>What will Trivia Train acheive?</h3>\n            <ul>\n                <li>Build a sense of community among daily commuters, leveraging people's pride in their train lines to encourage participation and friendly competition</li>\n                <li>\n                    Offer an opportunity to learn about local events, news, and history\n                    <ul>\n                        <li>Questions can even include advertisements for upcoming farmers market and other community events</li>\n                    </ul>\n                </li>\n                <li>Earn revenue for the subway system through sponsored questions, which can be used for rennovations</li>\n            </ul>\n\n            <h3>The Team</h3>\n            <p>Our team consisted of 6 RISD and Brown undergrads - most of whom hadn't met before the day started!</p>\n            <p>My teammates included:</p> \n            <ul>\n               <li>Matthew Derry <em>(Industrial Design &amp; Mech. Eng., RISD &amp; Brown)</em></li>\n               <li>Caffrey Fielding <em>(Industrial Design, RISD)</em></li>\n                <li>Al Huang <em>(Industrial Design, RISD)</em></li>\n                <li>Graham Keeley <em>(Engineering, Brown)</em></li>\n                <li>Avantika Velho <em>(Industrial Design, RISD)</em></li>\n                <li>Me <em>(Computer Science, Brown)</em></li>\n            </ul>\n\n            <h3>Result of the competition</h3>\n            <p>We were awarded <b>1st place at the 2020 RISD Makeathon</b> for our design of Trivia Train!</p> \n           \n            </div>;\n\n\n    render(){\n        let project_count = 0;\n\n        return (\n            <div id=\"design-projects\">\n                <h2>Spotlight Design Projects</h2>\n\n                <DisplayGrid items={this.state.projects.map((p) => <PopupButton key={\"design-project-\" + project_count++} \n                    title={p.title} \n                    subtitle={p.logline} \n                    thumbnail={p.thumbnail} \n                    keywords={p.tools}\n                    launchLink={p.launchLink}\n                    pageHTML={p.pageHTML}/>)} />\n           \n            </div>\n        );\n    }\n}\n\nexport default DesignProjects;","\n\nimport React, { Component } from 'react';\nimport './Section.css';\nimport resume from '../images/RESUME.pdf';\nimport { OpenInNew } from '@material-ui/icons';\n\nclass Resume extends Component {\n\n    // props are :headerText :list of body\n    constructor(props) {\n        super(props);\n      }\n\n    render(){    \n        return (\n            <div id=\"resume-container\">\n                <iframe src={resume} width=\"100%\" height=\"850px\"></iframe>\n                <a href={resume} target=\"_blank\"><button>Launch Full <OpenInNew style={{ \"margin-bottom\": \"-3px\" , \"fontSize\": \"1rem\"}}/></button></a>\n            </div>\n        );\n    }\n}\n\nexport default Resume;","\n\nimport React, { Component } from 'react';\nimport './Section.css';\n\nclass ArtProjects extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            projects: this.getProjects()\n        };\n      }\n\n    // all the code projects\n    getProjects() {\n        return []\n    }\n\n    render(){\n        let project_count = 0;\n\n        return (\n            <div id=\"art-projects\">\n                <h2>A Glimpse into my Home Studio...</h2>\n\n                <h4><em>Coming soon!</em></h4>\n           \n            </div>\n        );\n    }\n}\n\nexport default ArtProjects;","import React, { Component } from 'react';\nimport VerticalNavBar from './VerticalNavBar';\nimport WhoIAmPage from './sections/WhoIAmPage'\nimport Section from './sections/Section';\nimport './PortfolioSite.css';\nimport CodeProjects from './sections/CodeProjects';\nimport DesignProjects from './sections/DesignProjects';\nimport Resume from './sections/Resume';\nimport ArtProjects from './sections/ArtProjects';\n\nclass PortfolioSite extends Component {\n\n    constructor(props) {\n        super(props);\n\n        //initialize a map of all the pages I want to include\n        this.pages = [\n            {name: \"WHO I AM\", content: <WhoIAmPage/>},\n            {name: \"CODE\", content: <CodeProjects/>},\n            {name: \"DESIGN\", content: <DesignProjects/>},\n            {name: \"STUDIO ART\", content: <ArtProjects/>},\n            {name: \"RESUME\", content: <Resume/>}\n        ]\n\n        this.state = {\n            curPage: this.pages[0]\n        };\n      }\n\n    updateSelectedPage = (page) => {\n        this.setState({\n            curPage: page\n        })\n    }\n\n    render(){    \n        return (\n            <div className=\"site-wrapper\">\n            \n              <div className=\"site-content\">\n                    {this.state.curPage.content}\n\n                <div id=\"portfolio-navbar\">\n                     <VerticalNavBar pages={this.pages} selectPage={(pg) => this.updateSelectedPage(pg)}/>\n                </div>\n             </div>\n\n                <footer>This website was made with 💙 using Reactjs. <a href=\"https://github.com/laurawilsonri/portfolio\" target=\"_blank\">See source code.</a></footer>\n            </div>\n        );\n    }\n}\n\nexport default PortfolioSite;","import React from 'react';\nimport './App.css';\nimport PortfolioSite from './PortfolioSite';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <PortfolioSite/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}